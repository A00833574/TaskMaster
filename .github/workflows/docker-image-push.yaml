name: Docker Image Push to Kubernetes OCI

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install OCI CLI
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip3 install oci-cli
          oci --version

      - name: Configure OCI CLI
        run: |
          mkdir -p ~/.oci && echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
          echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/config ~/.oci/oci_api_key.pem

      - name: Validate OCI CLI
        run: |
          oci iam region list

      - name: Build Docker image
        run: |
          docker build -t todochat .

      - name: Log in to OCI Registry
        env:
          OCI_AUTHTOKEN: ${{ secrets.OCI_AUTHTOKEN }}
        run: |
          echo $OCI_AUTHTOKEN | docker login ${{ secrets.OCI_REGION }}.ocir.io -u ${{ secrets.OCI_NAMESPACE }}/${{ secrets.OCI_USERNAME }} --password-stdin

      - name: Tag Docker image
        run: |
          docker tag todochat ${{ secrets.OCI_REGION }}.ocir.io/${{ secrets.OCI_NAMESPACE }}/todochat:latest

      - name: Push Docker image to OCI Registry
        run: |
          docker push ${{ secrets.OCI_REGION }}.ocir.io/${{ secrets.OCI_NAMESPACE }}/todochat:latest

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Configure kubectl
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "${KUBECONFIG}" > $HOME/.kube/config
          export KUBECONFIG=$HOME/.kube/config
          kubectl config view
          kubectl get nodes

      - name: Deploy to Kubernetes
        run: |
          kubectl delete -f taskmaster.yaml --ignore-not-found=true
          kubectl create -f taskmaster.yaml

      - name: Check deployment status
        run: |
          sleep 40
          kubectl get pods
          kubectl get services

      - name: Get LoadBalancer IP
        id: get_ip
        run: |
          IP=$(kubectl get services | grep LoadBalancer | awk '{print $4}')
          echo "LoadBalancer IP: $IP"
          echo "::set-output name=ip::$IP"

      - name: Update repository description with LoadBalancer IP
        uses: actions/github-script@v3
        with:
          script: |
            const newDescription = `LoadBalancer IP address: ${process.env.LOAD_BALANCER_IP}`;
            github.repos.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              description: newDescription
            });
        env:
          REPO_PAT: ${{ secrets.REPO_PAT }}
          LOAD_BALANCER_IP: ${{ steps.get_ip.outputs.ip }}
